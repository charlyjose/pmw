datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

enum Role {
  ADMIN
  STUDENT
  TUTOR
  CSD
}

enum Department {
  ADMIN
  SCMS
  ME
  AE
  CSD
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  name           String
  role           Role
  department     Department
  email          String     @unique
  hashedPassword String
  emailVerified  DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  Appointment     Appointment[]
  Job             Job[]
  PlacementReport PlacementReport[]
}

enum AppointmentAgenda {
  MOCK_INTERVIEW
  CV_REVIEW
  CAREER_GUIDANCE
  OTHER
}

enum AppointmentMode {
  ONLINE
  OFFLINE
}

enum AppointmentTeam {
  CSD
  TUTOR
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  PENDING
  STARTED
  COMPLETED
}

model Appointment {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  ownerId           String            @db.ObjectId
  owner             User              @relation(fields: [ownerId], references: [id])
  confirmed         Boolean           @default(false)
  notified_invitees Boolean           @default(false)
  status            AppointmentStatus @default(PENDING)
  agenda            AppointmentAgenda
  mode              AppointmentMode
  team              AppointmentTeam
  invitees          String[]
  description       String
  date              DateTime
  time              String
  duration          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // TODO: Invitee email should be a user email from the user model
  // TODO: Schema change for notification status for individual invitees
}

enum JobMode {
  REMOTE
  HYBRID
  OFFICE
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  owner       User     @relation(fields: [ownerId], references: [id])
  role        String
  company     String
  description String
  salary      Int
  mode        JobMode
  location    String[]
  deadline    DateTime
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PlacementReportMonth {
  MONTH_1
  MONTH_2
  MONTH_3
  MONTH_4
  MONTH_5
  MONTH_6
  MONTH_7
  MONTH_8
  MONTH_9
  MONTH_10
  MONTH_11
  MONTH_12
}

enum PlacementReportFileType {
  PDF
  DOCX
  DOC
  TXT
  OTHER
}

model PlacementReport {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String                  @db.ObjectId
  owner       User                    @relation(fields: [ownerId], references: [id])
  title       String
  month       PlacementReportMonth
  report_name String
  file_type   PlacementReportFileType
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}
