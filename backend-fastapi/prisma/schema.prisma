datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

// User model
enum Role {
  ADMIN
  STUDENT
  TUTOR
  CSD
}

enum Department {
  SCMS
  ME
  AE
  CSD
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  name           String
  role           Role
  department     Department
  email          String     @unique
  hashedPassword String
  emailVerified  DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // accounts    Account[]
  Appointment Appointment[]
}

enum AppointmentAgenda {
  MOCK_INTERVIEW
  CV_REVIEW
  CAREER_GUIDANCE
  OTHER
}

enum AppointmentMode {
  ONLINE
  OFFLINE
}

enum AppointmentTeam {
  CSD
  TUTOR
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  PENDING
  STARTED
  COMPLETED
}

model Appointment {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  ownerId           String            @db.ObjectId
  owner             User              @relation(fields: [ownerId], references: [id])
  confirmed         Boolean           @default(false)
  notified_invitees Boolean           @default(false)
  status            AppointmentStatus @default(PENDING)
  agenda            AppointmentAgenda
  mode              AppointmentMode
  team              AppointmentTeam
  invitees          String[]
  description       String
  date              DateTime
  time              String
  duration          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // TODO: Invitee email should be a user email from the user model
  // TODO: Schema change for notification status for individual invitees
}

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }
