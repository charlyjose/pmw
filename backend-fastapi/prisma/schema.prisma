datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

enum Role {
  ADMIN
  STUDENT
  TUTOR
  CSD
}

enum Department {
  ADMIN
  SCMS
  ME
  AE
  CSD
}

enum StudentLevel {
  NOT_APPLICABLE
  UNDERGRADUATE
  POSTGRADUATE
  PHD
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum StudentStatus {
  ON_PLACEMENT
  NOT_ON_PLACEMENT
  GRADUATED
  NOT_APPLICABLE
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  name           String
  role           Role
  department     Department
  status         UserStatus    @default(ACTIVE)
  studentStatus  StudentStatus @default(NOT_APPLICABLE)
  studentLevel   StudentLevel  @default(NOT_APPLICABLE)
  email          String        @unique
  hashedPassword String
  emailVerified  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  PlacementTutor                     PlacementTutor?
  Appointment                        Appointment[]
  Job                                Job[]
  PlacementReport                    PlacementReport[]
  PlacementApplication               PlacementApplication?
  PlacementApplicationReviewComments PlacementApplicationReviewComments[]
  PlacementStudents                  PlacementStudents?
  JobApplication                     JobApplication[]
}

model PlacementTutor {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @unique @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  department Department
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum AppointmentAgenda {
  MOCK_INTERVIEW
  CV_REVIEW
  CAREER_GUIDANCE
  OTHER
}

enum AppointmentMode {
  ONLINE
  OFFLINE
}

enum AppointmentTeam {
  CSD
  TUTOR
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  PENDING
  STARTED
  COMPLETED
}

model Appointment {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String            @db.ObjectId
  owner       User              @relation(fields: [ownerId], references: [id])
  confirmed   Boolean           @default(false)
  status      AppointmentStatus @default(PENDING)
  agenda      AppointmentAgenda
  mode        AppointmentMode
  team        AppointmentTeam
  description String
  date        DateTime
  time        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum JobMode {
  REMOTE
  HYBRID
  OFFICE
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  owner       User     @relation(fields: [ownerId], references: [id])
  role        String
  company     String
  description String
  salary      Int
  mode        JobMode
  location    String[]
  deadline    DateTime
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  JobApplication JobApplication[]
}

enum PlacementReportMonth {
  MONTH_1
  MONTH_2
  MONTH_3
  MONTH_4
  MONTH_5
  MONTH_6
  MONTH_7
  MONTH_8
  MONTH_9
  MONTH_10
  MONTH_11
  MONTH_12
}

enum PlacementReportFileType {
  PDF
  DOCX
  DOC
  TXT
  OTHER
}

model PlacementReport {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String                  @db.ObjectId
  owner       User                    @relation(fields: [ownerId], references: [id])
  title       String
  month       PlacementReportMonth
  report_name String
  file_type   PlacementReportFileType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobApplicationFileType {
  PDF
  DOCX
  DOC
  TXT
  OTHER
}

model JobApplication {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  ownerId   String                 @db.ObjectId
  owner     User                   @relation(fields: [ownerId], references: [id])
  jobId     String                 @db.ObjectId
  job       Job                    @relation(fields: [jobId], references: [id])
  name      String
  email     String
  cvName   String
  fileType JobApplicationFileType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlacementApplicationStudentVisa {
  YES
  NO
}

enum PlacementApplicationProbationPeriod {
  YES
  NO
}

enum PlacementApplicationRoleInformed {
  YES
  NO
}

enum PlacementApplicationRemoteWorking {
  YES
  NO
}

enum PlacementApplicationTravelMethod {
  OWN_VEHICLE
  PUBLIC_TRANSPORT
  WALKING
  CYCLE
  OTHER
}

enum PlacementApplicationTravelDifferentLocation {
  YES
  NO
}

enum PlacementApplicationLocationRisks {
  YES
  NO
}

enum PlacementApplicationAccommodationArrangements {
  RENT_SHARED_HOUSE_FLAT
  RENT_INDIVIDUAL_HOUSE_FLAT
  LIVE_AT_HOME
  OTHER
}

enum PlacementApplicationPrecautionaryMeasures {
  YES
  NO
}

enum PlacementApplicationHealthConditions {
  YES
  NO
}

enum PlacementApplicationDisability {
  YES
  NO
}

enum PlacementApplicationOverseas {
  YES
  NO
}

enum PlacementApplicationStatus {
  SUBMITTED
  PENDING
  REVIEW
  APPROVED
  REJECTED
}

model PlacementApplication {
  id                                    String                                        @id @default(auto()) @map("_id") @db.ObjectId
  ownerId                               String                                        @unique @db.ObjectId
  owner                                 User                                          @relation(fields: [ownerId], references: [id])
  // Student details
  firstName                             String
  lastName                              String
  studentNumber                         String
  email                                 String
  programme                             String
  department                            String
  contactNumber                         String
  studentVisa                           PlacementApplicationStudentVisa               @default(NO)
  // Placement provider details
  organisationName                      String
  organisationAddress                   String
  organisationPostcode                  String
  organisationWebAddress                String
  organisationContactName               String
  organisationContactJobTitle           String
  organisationContactEmail              String
  organisationContactNumber             String
  organisationLocationGoogleMapsAddress String
  organisationLocationGoogleMapsLat     Float
  organisationLocationGoogleMapsLng     Float
  // Placement Role Details
  roleTitle                             String
  roleStartDate                         DateTime
  roleEndDate                           DateTime
  workingHours                          Int
  probationPeriod                       PlacementApplicationProbationPeriod           @default(NO)
  salary                                Int
  roleSource                            String
  roleInformed                          PlacementApplicationRoleInformed              @default(NO)
  roleDescription                       String
  probationPeriodDetails                String
  // Work Factors
  remoteWorking                         PlacementApplicationRemoteWorking             @default(NO)
  remoteWorkingOverview                 String
  remoteWorkingReason                   String
  // Transport and Travel Factors
  travelMethod                          PlacementApplicationTravelMethod
  travelMethodDetails                   String
  travelDifferentLocation               PlacementApplicationTravelDifferentLocation   @default(NO)
  travelDifferentLocationDetails        String
  // Location and Regional Factors
  locationRisks                         PlacementApplicationLocationRisks             @default(NO)
  locationRisksDetails                  String
  accommodationArrangements             PlacementApplicationAccommodationArrangements @default(RENT_SHARED_HOUSE_FLAT)
  accommodationArrangementsDetails      String
  // Health and Environmental Factors
  precautionaryMeasures                 PlacementApplicationPrecautionaryMeasures     @default(NO)
  precautionaryMeasuresDetails          String
  // Personal Factors
  healthConditions                      PlacementApplicationHealthConditions          @default(NO)
  healthConditionsDetails               String
  disability                            PlacementApplicationDisability                @default(NO)
  disabilityDetails                     String
  // Policies and Insurance
  placementOverseas                     PlacementApplicationOverseas                  @default(NO)
  // Declaration and Signature
  declarationName                       String
  declarationSignature                  String
  declarationDate                       DateTime
  // Status
  status                                PlacementApplicationStatus                    @default(PENDING)
  // Review
  reviewerId                            String                                        @default("") @db.ObjectId
  createdAt                             DateTime                                      @default(now())
  updatedAt                             DateTime                                      @updatedAt

  PlacementApplicationReviewComments PlacementApplicationReviewComments[]
}

model PlacementApplicationReviewComments {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  ownerId       String               @db.ObjectId
  owner         User                 @relation(fields: [ownerId], references: [id])
  applicationId String               @unique @db.ObjectId
  application   PlacementApplication @relation(fields: [applicationId], references: [id])
  comments      String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

enum StudentPlacementStatus {
  ON_PLACEMENT
  NOT_ON_PLACEMENT
  COMPLETED_PLACEMENT
}

enum PlacementVisitStatus {
  PENDING
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PlacementVisitRegion {
  LONDON
  SE
  SW
  WALES
  EM
  WM
  NE
  NW
  YH
  NI
  SCOTLAND
  INTERNATIONAL
}

model PlacementStudents {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId      String                 @unique @db.ObjectId
  user        User                   @relation(fields: [userId], references: [id])
  status      StudentPlacementStatus @default(ON_PLACEMENT)
  startDate   DateTime
  endDate     DateTime
  roleTitle   String
  orgName     String
  address     String
  latitude    Float
  longitude   Float
  region      PlacementVisitRegion
  visitStatus PlacementVisitStatus   @default(PENDING)
  tutorId     String                 @db.ObjectId
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}
